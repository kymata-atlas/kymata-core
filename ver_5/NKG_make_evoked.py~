
print(__doc__)

import numpy as np
import sys
sys.path.append('/imaging/local/software/mne_python/latest_v0.8')
sys.path.append('/imaging/local/software/python_packages/scikit-learn/v0.14.1')
sys.path.append('/imaging/local/software/python_packages/pysurfer/v0.4')

import mne
from mne import io

#for parts
#for events

###############################################################################
# Set parameters
data_path = '/imaging/at03/NKG_Code_output/Version5/DATASET_3-01_visual-and-auditory'
raw_fname = data_path + '/1-preprosessing/sss/meg15_0082_nkg_part2_raw_sss_movecomp_EEGmainline.fif'
event_fname = data_path + '/3-sensor-data/eventFiles/audio/meg15_0082_part2.eve'
event_id, tmin, tmax = 382, -0.2, 1.8

#   Setup for reading the raw data
raw = io.Raw(raw_fname)
events = mne.read_events(event_fname)

#   Plot raw data
fig = raw.plot(events=events)

# picks
include = [] # No MISC05, Trigger channels etc
picks = mne.pick_types(raw.info, meg=True, eeg=True, stim=False, exclude='bads')

# Read epochs
epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks,
                    baseline=(None, 0), reject=dict(eeg=200e-6, grad=4000e-13, mag=4e-12,),
                    preload=True)

#epochs.plot()

#evoked = epochs.average()  # average epochs and get an Evoked dataset.

#evoked.save('sample_audvis_eeg-ave.fif')  # save evoked data to disk

###############################################################################
# View evoked response
#times = 1e3 * epochs.times  # time in miliseconds

#ch_max_name, latency = evoked.get_peak(mode='neg')

#import matplotlib.pyplot as plt
#evoked.plot()

#plt.xlim([times[0], times[-1]])
#plt.xlabel('time (ms)')
#plt.ylabel('Potential (uV)')
#plt.title('EEG evoked potential')
#
#plt.axvline(latency * 1e3, color='red', 
#            label=ch_max_name, linewidth=2,
#            linestyle='--')
#plt.legend(loc='best')

#plt.show()

# Look at channels that caused dropped events, showing that the subject's
# blinks were likely to blame for most epochs being dropped
#epochs.drop_bad_epochs()
#epochs.plot_drop_log(subject='sample')
